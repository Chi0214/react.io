{"version":3,"sources":["logo.svg","compnents/home.jsx","compnents/doc.jsx","compnents/api.jsx","compnents/gui.jsx","router/router.config.js","compnents/course.jsx","compnents/login.jsx","router/router.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Home","props","state","React","Component","Doc","window","sessionStorage","getItem","this","history","push","Api","Gui","routes","path","exact","title","conponent","routes1","pri","islogin","setState","setItem","parseInt","Math","random","alert","clear","onClick","outLogin","login","RouterList","index","i","console","log","className","map","item","toggleMenu","to","item1","index1","component","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.43179310.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\n\nclass Home extends React.Component{\n    constructor(props){\n        super(props);\n        this.state={\n\n        }\n    }\n    render(){\n        return(\n            <div>\n                hello word \n                home\n            </div>\n        )\n    }\n}\nexport default Home;\n","import React from 'react';\n\nclass Doc extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n\n        }\n    }\n    componentDidMount() {\n        let token = window.sessionStorage.getItem('token');\n        if (token == null) {\n            this.props.history.push('/login');\n        }\n    }\n    render() {\n        return (\n            <div>\n                hello word\n                Doc\n            </div>\n        )\n    }\n}\nexport default Doc;\n","import React from 'react';\n\nclass Api extends React.Component{\n    constructor(props){\n        super(props);\n        this.state={\n\n        }\n    }\n    render(){\n        return(\n            <div>\n                hello word \n                Api\n            </div>\n        )\n    }\n}\nexport default Api;\n","import React from 'react';\n\nclass Gui extends React.Component{\n    constructor(props){\n        super(props);\n        this.state={\n\n        }\n    }\n    render(){\n        return(\n            <div>\n                hello word \n                Gui\n            </div>\n        )\n    }\n}\nexport default Gui;\n","import Home from '../compnents/home';\nimport Doc from '../compnents/doc';\nimport Api from '../compnents/api';\nimport Gui from '../compnents/gui';\nimport Course from '../compnents/course';\nimport Login from '../compnents/login';\nconst routes = [\n    // 首页\n    {\n        path: '/',\n        exact: true,\n        title: '首页',\n        conponent: Home\n    },\n    // 文档页\n    {\n        path: '/doc',\n        title: '文档',\n        conponent: Doc,\n        routes1: [\n            {\n                path: '/doc/api',\n                title: 'API接口',\n                conponent: Api,\n            },\n            {\n                path: '/doc/gui',\n                title: 'gui教程',\n                conponent: Gui,\n            }\n        ]\n    },\n    // 教程页\n    {\n        path: '/course',\n        title: '教程页',\n        exact: true,\n        pri: true,\n        conponent: Course,\n        routes1: [\n            {\n                path: '/doc/api',\n                title: 'API接口',\n                conponent: Api,\n            },\n            {\n                path: '/doc/gui',\n                title: 'gui教程',\n                conponent: Gui,\n            }\n        ]\n    },\n    // login\n    {\n        path: '/login',\n        title: '登录',\n        exact: true,\n        conponent: Login\n    }\n];\n\nexport default routes;","import React from 'react';\n\nclass Course extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n\n        }\n    }\n    componentDidMount() {\n        let token = window.sessionStorage.getItem('token');\n        if (token == null) {\n            this.props.history.push('/login');\n        }\n    }\n    render() {\n        return (\n            <div>\n                hello word\n                Course\n            </div>\n        )\n    }\n}\nexport default Course;\n","import React from 'react';\n\nclass Login extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            islogin: false\n        }\n    }\n    componentDidMount(){\n        let token = window.sessionStorage.getItem('token');\n        if(token != null){\n            this.setState({\n                islogin:true\n            })\n\n        }\n    }\n    login(){\n        window.sessionStorage.setItem('token',parseInt(Math.random() * (100000 - 1000 + 1) + 1000, 10));\n        this.setState({\n            islogin:true\n        });\n        alert('登录成功')\n    }\n    outLogin(){\n        window.sessionStorage.clear();\n        this.setState({\n            islogin:false\n        });\n        alert('退出登录成功')\n    }\n    render() {\n        return (\n            <div>\n                {\n                    this.state.islogin ?\n                        <div>\n                            登录成功\n                            <button onClick={()=>{this.outLogin()}}>退出登录</button>\n                        </div>\n                        :\n                        <div>\n                            <button onClick={()=>{this.login()}}>点击登录</button>\n                        </div>\n                }\n            </div>\n        )\n    }\n}\nexport default Login;\n","import React from 'react';\nimport { HashRouter as Router, Link, Switch, Route } from 'react-router-dom';\nimport routes from './router.config'\nimport '../assets/css/menu.css'\nclass RouterList extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            index: 0\n        }\n    };\n    toggleMenu(i) {\n        this.setState({\n            index: i\n        });\n        console.log(this.state.index)\n    }\n    render() {\n        return (\n            <Router>\n                <div className='menu'>\n\n                    {\n                        routes.map((item, index) => {\n                            return (\n                                <div>\n                                    <Link onClick={() => { this.toggleMenu(index) }} className={this.state.index == index ? 'act' : ''} to={item.path}>{item.title}</Link>\n                                    {\n                                        item.routes1 != null ?\n                                            <ul>\n                                                {\n                                                    item.routes1.map((item1, index) => {\n                                                        return (\n                                                            <li>\n                                                                <Link to={item1.path}>{item1.title}</Link>\n                                                            </li>\n                                                        )\n                                                    })\n                                                }\n                                            </ul>\n                                            :\n                                            <></>\n                                    }\n\n\n                                </div>\n                            )\n                        })\n                    }\n                </div>\n                <div className='b_c'>\n                    <Link to='/doc'>快速开始</Link>\n                    <Link to='/course'>入门教程</Link>\n                    {\n                        routes.map((item, index) => {\n                            return (\n                                <Switch>\n                                    {\n                                        item.routes1 != null ?\n                                            item.routes1.map((item1, index1) => {\n                                                return (\n                                                    <Route exact path={item1.path} component={item1.conponent} />\n                                                )\n                                            })\n                                            :\n                                            <Route exact path={item.path} component={item.conponent} />\n                                    }\n                                </Switch>\n                            )\n                        })\n                    }\n                </div>\n            </Router>\n        )\n    }\n}\n\nexport default RouterList;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport RouterList from './router/router'\nfunction App() {\n  return (\n    <div className=\"App\">\n        <RouterList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}